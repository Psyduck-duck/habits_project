services:
  db:
    image: postgres:16
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - my_network
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 30s
      timeout: 10s
      retries: 5

  web:
    container_name: web
    build: .
    command: sh -c "gunicorn --workers 3 --bind 0.0.0.0:8000 config.wsgi:application"
#      sh -c "while ! (echo > /dev/tcp/db/5432) >/dev/null 2>&1; do sleep 1; done
#      && python manage.py migrate
#      && python manage.py runserver 0.0.0.0:8000"

    volumes:
      - .:/app
      - static_volume:/app/staticfiles
    ports:
      - "8000:8080"
    depends_on:
      - db
    networks:
      - my_network
    env_file:
      - ./.env

  nginx:
    build:
      context: ./nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/app/staticfiles
    ports:
      - "80:80"
    networks:
      - my_network
    dns:
      - 127.0.0.11
    depends_on:
      - web
    env_file:
      - ./.env

  redis:
    image: redis:latest
    volumes:
      - redis_data:/data
    env_file:
      - ./.env
    ports:
      - "6379:6379"
    networks:
      - my_network

  celery:
    build: .
    command: >
       bash -c "celery -A config worker --loglevel=info --pool=solo"
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - web
    networks:
      - my_network
    env_file:
      - ./.env

  celery-beat:
    build: .
    command: >
      bash -c "celery -A config beat -l info"
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - web
    networks:
      - my_network
    env_file:
      - ./.env

networks:
  my_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  redis_data: